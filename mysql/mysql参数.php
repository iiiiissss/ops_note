mysql优化配置文件的优化：
以下列出my.cnf文件中的[mysqld]段落里的内容，
[mysqld]组中包括了mysqld服务启动时的参数，它涉及的方面很多，其中有mysql的目录和文件、通信、网络、信息安全、内存管理、优化、查询缓存区，以及mysql日志设置等
[mysqld]

port=3306
mysqld服务运行时的端口号

socket=/tmp/mysql.sock
socket文件是在Linux/unix环境下特有的，用户在Linux/unix环境下客户端连接可以不通过tcp/ip网络而直接使用unix socket连接mysql（基于安全因素考虑）

skip-external-locking
避免mysql的外部锁定，减少出错的几率，增强稳定性

skip-name-resolve
禁止mysql对外部连接进行DNS解析，使用这一选项可以消除mysql进行DNS解析的时间，但是需要注意的是，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式了，否则mysql将无法正常处理连接的请求

back_log=384
back_log参数的值指出在mysql暂时停止响应新请求之前，短时间内的多少个请求可以被存在堆栈中。如果系统在短时间内有很多连接，则需要增大该参数的值，该参数指定到来的TCP/IP连接的侦听队列的大小，不同的操作系统的这个队列的大小上有它自己的限制，如果试图将back_log设定的高于操作系统的限制将是无效的，其默认值是50，而对于Linux系统而言，推荐设置为小于512的整数

key_buffer_size=384M
key_buffer_size指定用于索引的缓冲区大小，增加它可以得到更好的索引处理性能。对于内存在4G左右的服务器来说，该参数可以设置为256或384。不建议将该参数设置的过大，这样反而会降低服务器的整体效率（如果是16G的话，可以给2G，后面可以通过一些参数的计算来修改）

max_allowed_packet=4M
max_allowed_packet指在网络传输中一次消息传输量的最大值，系统默认值为1MB，最大值是1GB，必须设置为1024的倍数，单位为字节

thread_stact=256k
thread_stack是指设置mysql每一个线程的堆栈大小，默认值足够大，可满足普通操作，可设置范围128K至4GB，默认192KB

table_cache=614k
table_cache是指表高速缓存的大小，当mysql访问一个表时，如果在mysql表缓冲区中还有空间，那么这个表就被打开并放入表缓冲区，这样做的好处是可以更快速的访问表中的内容，一般来说，可以通过查看数据运行峰值时间的状态值open_tables和opened_tables，用以判断是否需要增加table_cache的值，即如果open_tables接近table_cache的时候，并且opened_tables这个值在逐步增加，那就要考虑增加这个值的大小了

sort_buffer_size=6M
sort_buffer_size指的是查询排序时所能使用的缓冲区大小，系统默认大小为2MB，从5.1.23版本开始，在除了windows之外的64位平台上可以超出4GB的限制，该参数对应的分配内存是每个连接独占的，如果有100个连接，那么实际分配的总排序缓冲区大小就是100*6MB=600MB，所以对于内存在4GB左右的服务器来说，推荐将其设置为6~8MB

read_buffer_size=4M
read_buffer_size指的是读查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享

join_buffer_size=8M
join_buffer_size指的是联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享

myisam_sort_buffer_size=64M
myisam_sort_buffer_size用于设置在repair table

thread_cache_size=64
thread_cache_size用于设置thread cache池中可以缓存的连接线程最大数量，可设置为0~16384，默认为0，这个值表示可以重新利用保存在缓存中线程的数量，当断开连接时，如果缓存中还有空间，那么客户端的线程将被放到缓存中，如果线程重新被请求，那么请求将从缓存中读取，如果缓存中是空的或者是新的请求，那么这个线程将被重新创建，如果有很多新的线程，增加这个值可以改善系统性能，通过比较connections和threads_created状态的变量，可以看到这个变量的作用，我们可以根据物理内存设置规则如下：1GB内存可以配置为8，2GB内存可以配置为16，3GB内存可以配置为32，4GB及以上可以给此值为64或者更大的数值

query_cache_size=64M
query_cache_size指定mysql查询缓冲区的大小。可以通过在mysql控制台观察，如果qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，如果qcache_hits的值非常大，则表明查询缓冲使用的非常频繁，另外，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲，对于qcache_free_blocks，如果该值非常大，则表明缓冲区的碎片很多

tmp_table_size=256M
tmp_table_size用于设置内存临时表的最大值，如果超过该值，则会将临时表写入磁盘，其范围为1KB到4GB

max_connections=768
max_connections用于指定mysql允许的最大连接进程数，如果在访问论坛时经常出现“too many connections”的错误提示，则需要增大该参数值

max_connect_errors=1000
max_connect_errors用于设置每台主机的连接请求异常中断的最大次数，如果超过该次数，mysql服务器将禁止host的连接请求，知道mysql服务器重启或者通过flush hosts命令清空此host的相关信息，此值可以设置为1~18446744073709547520，默认为10

wait_timeout=10
wait_timeout用于指定一个请求的最大连接事件，对于4GB左右内存的服务器来说，可以将其设置为5~10

thread_concurrency=8
thread_concurrency的取值为服务器逻辑CPU数量的两倍，如，2个cpu，都支持超线程，所以实际取值为2*2*2=8

skip_networking
skip_networking指开启该选项可以彻底关闭mysql的TCP/IP连接方式，如果web服务器是以远程连接的方式访问mysql数据库服务器的则不要开启该选项，否则无法正常连接

table_cache=1024
物理内存越大，设置即越大，默认为2402，调大512~1024最佳

innodb_additional_mem_pool_size=4M
默认为2MB

innodb_flush_log_at_trx_commit=1
设置为0就是等到innodb_log_buffer_size列队满后再统一储存，默认为1

innodb_log_buffer_size=2M
默认为1MB

innodb_thread_concurrency=8
服务器CPU有几个就设置为几，建议用默认设置，一般为8

tmp_table_size=64M
用于设置内存临时表最大值，如果超过该值，则会将临时表写入磁盘，设置范围为1KB~4GB

read_rnd_buffer_size=16M
read_rnd_buffer_size设置进行随机读的时候所使用的缓冲区，此参数和read_buffer_size所设置的buffer相反，一个是顺序读的时候使用，一个是随机读的时候使用，但是两者都是针对线程的设置，每个线程都可以产生两种buffer中的任何一种，read_rnd_buffer_size的默认值为256KB，最大值为4GB
值得注意的是，如果key_reads太大，则应该把my.cnf中的key_buffer_size变大，保持key_reads/key_requests至少在1/100以上，越小越好，如果qcache_lowmem_prunes很大，就要增加query_cache_size的值
不过，很多时候需要具体情况具体分析，其他参数的变更我们可以等mysql上线稳定一段时间后根据status值进行调整



